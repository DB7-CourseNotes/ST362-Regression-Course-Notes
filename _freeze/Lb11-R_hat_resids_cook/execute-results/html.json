{
  "hash": "7de03b95ec2982ea8051532e194c9b39",
  "result": {
    "markdown": "---\ntitle: \"Hat Matrix and Residuals in R\"\noutput: html_notebook\n---\n\n\n\n\n\n## The Hat Matrix\n\n$$\nH = X(X^TX)^{-1}X^T\n$$\n\nIn R, we can calculate the diagonal of the hat matrix as follows:\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-2_0408aa92a3c41cef04a0632670dae680'}\n\n```{.r .cell-code}\nmylm <- lm(mpg ~ disp + wt, data = mtcars)\nhatvalues(mylm) |> unname()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 0.04339369 0.04550894 0.06309504 0.03877647 0.14078260 0.04406584\n [7] 0.11516157 0.09635365 0.09875274 0.11012510 0.11012510 0.08141444\n[13] 0.04168379 0.04521644 0.17206264 0.19889125 0.19275897 0.08015728\n[19] 0.12405357 0.09579747 0.05703451 0.06246825 0.05648077 0.06838477\n[25] 0.14119998 0.08720679 0.07149742 0.16032953 0.18794989 0.05044456\n[31] 0.04474121 0.07408572\n```\n:::\n:::\n\n\n## Extracting the Diagonals from H\n\nThere isn't a built-in function for the full hat matrix (the diagonals are usually all you'll need). For demonstration, here are some demonstrations of the features of the hat matrix.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-3_6fe2229860e831bc800462ba60bc7c36'}\n\n```{.r .cell-code}\nX <- model.matrix(mylm)\nH <- X %*% solve(t(X) %*% X) %*% t(X)\nall.equal(diag(H), hatvalues(mylm))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] TRUE\n```\n:::\n:::\n\n\n## Features of H\n\nIn the code below, I use the `unname()` function because mtcars has rownames which make the output harder to see (this used to be the norm in R, but it's fallen out of fashion).\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-4_ab6a824312d6abfd3547c1973c26c9a0'}\n\n```{.r .cell-code}\ncolSums(H) |> unname()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n```\n:::\n\n```{.r .cell-code}\nrowSums(H) |> unname()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n```\n:::\n\n```{.r .cell-code}\nrange(H) # -1 <= h_{ij} <= 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.1076609  0.1988913\n```\n:::\n\n```{.r .cell-code}\nrange(diag(H)) # 0 <= h_{ii} <= 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.03877647 0.19889125\n```\n:::\n\n```{.r .cell-code}\nH %*% rep(1, ncol(H)) # H1 = 1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                    [,1]\nMazda RX4              1\nMazda RX4 Wag          1\nDatsun 710             1\nHornet 4 Drive         1\nHornet Sportabout      1\nValiant                1\nDuster 360             1\nMerc 240D              1\nMerc 230               1\nMerc 280               1\nMerc 280C              1\nMerc 450SE             1\nMerc 450SL             1\nMerc 450SLC            1\nCadillac Fleetwood     1\nLincoln Continental    1\nChrysler Imperial      1\nFiat 128               1\nHonda Civic            1\nToyota Corolla         1\nToyota Corona          1\nDodge Challenger       1\nAMC Javelin            1\nCamaro Z28             1\nPontiac Firebird       1\nFiat X1-9              1\nPorsche 914-2          1\nLotus Europa           1\nFord Pantera L         1\nFerrari Dino           1\nMaserati Bora          1\nVolvo 142E             1\n```\n:::\n:::\n\n\n## Extracting the residuals\n\nSee `?influence.measures`.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-5_eda8dda52a62eccb65bc2faf9023f130'}\n\n```{.r .cell-code}\n?rstandard\ncooks.distance(mylm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          Mazda RX4       Mazda RX4 Wag          Datsun 710      Hornet 4 Drive \n       1.022220e-02        4.351414e-03        1.721743e-02        5.241995e-03 \n  Hornet Sportabout             Valiant          Duster 360           Merc 240D \n       2.027544e-02        3.089406e-03        3.094888e-02        3.443123e-02 \n           Merc 230            Merc 280           Merc 280C          Merc 450SE \n       3.775416e-03        8.693734e-03        3.864780e-02        4.425052e-06 \n         Merc 450SL         Merc 450SLC  Cadillac Fleetwood Lincoln Continental \n       1.330376e-04        9.458368e-03        1.920638e-02        3.794816e-02 \n  Chrysler Imperial            Fiat 128         Honda Civic      Toyota Corolla \n       3.441118e-01        1.429900e-01        3.046404e-02        1.850525e-01 \n      Toyota Corona    Dodge Challenger         AMC Javelin          Camaro Z28 \n       2.372110e-02        1.146745e-02        2.036673e-02        2.070769e-02 \n   Pontiac Firebird           Fiat X1-9       Porsche 914-2        Lotus Europa \n       1.331763e-01        2.049673e-04        3.812246e-04        4.292901e-02 \n     Ford Pantera L        Ferrari Dino       Maserati Bora          Volvo 142E \n       5.996344e-02        2.547326e-02        1.362489e-02        1.494183e-02 \n```\n:::\n:::\n\n\n## The `broom` package\n\nThe `broom` package has a wonderful function called `augment()`. This function sets up our data so that it's super easy to see what we need.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-6_5ba9c7389a28cceddb52f3ed3428e406'}\n\n```{.r .cell-code}\nlibrary(broom)\naugment(mylm)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 32 × 10\n   .rownames     mpg  disp    wt .fitted .resid   .hat .sigma .cooksd .std.resid\n   <chr>       <dbl> <dbl> <dbl>   <dbl>  <dbl>  <dbl>  <dbl>   <dbl>      <dbl>\n 1 Mazda RX4    21    160   2.62    23.3 -2.35  0.0434   2.93 0.0102      -0.822\n 2 Mazda RX4 …  21    160   2.88    22.5 -1.49  0.0455   2.95 0.00435     -0.523\n 3 Datsun 710   22.8  108   2.32    25.3 -2.47  0.0631   2.93 0.0172      -0.876\n 4 Hornet 4 D…  21.4  258   3.22    19.6  1.79  0.0388   2.95 0.00524      0.624\n 5 Hornet Spo…  18.7  360   3.44    17.1  1.65  0.141    2.95 0.0203       0.609\n 6 Valiant      18.1  225   3.46    19.4 -1.28  0.0441   2.96 0.00309     -0.448\n 7 Duster 360   14.3  360   3.57    16.6 -2.32  0.115    2.93 0.0309      -0.845\n 8 Merc 240D    24.4  147.  3.19    21.7  2.73  0.0964   2.92 0.0344       0.984\n 9 Merc 230     22.8  141.  3.15    21.9  0.890 0.0988   2.96 0.00378      0.322\n10 Merc 280     19.2  168.  3.44    20.5 -1.26  0.110    2.96 0.00869     -0.459\n# ℹ 22 more rows\n```\n:::\n:::\n\n\nNotice that it includes:\n\n-   `.fitted` = $X\\underline{\\hat\\beta}$\n-   `.resid` = $\\hat{\\underline\\epsilon}$\n-   `.hat` = $diag(H)$\n-   `.sigma` = $s_{(i)}$\n-   `.cooksd` = `D`\n-   `.std.resid` = standardized or studentized residuals?\n\n## Plotting the residuals\n\nIf you've ever accidentally typed `plot(mylm)`, you've seen some plots of the residuals.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-7_7bf34ba7fbede5cb074b05319c6a7671'}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2))\nplot(mylm) # ?plot.lm\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\nYou can access individual plots with the `which` argument.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-8_06b60718abab4c2f99aba07641190c21'}\n\n```{.r .cell-code}\npar(mfrow = c(2, 3))\nplot(mylm, which = 1:6)\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n99% of the time, the default plots are the ones you'll want to look at. For teaching purposes, we'll look at a few extra.\n\n## Demonstrations\n\nWe'll use the `Ozone` data from the `mlbench` package.\n\n-   V4 is response (measurement of Ozone)\n-   V5 is atmospheric pressure\n-   V6 is wind speed\n-   V7 is humidity\n-   We'll ignore the rest.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-9_5fd9bb361d7cd1a0bedd1c41e803e157'}\n\n```{.r .cell-code}\nlibrary(mlbench)\ndata(Ozone)\nstr(Ozone) # V4 is response (measurement of Ozone)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n'data.frame':\t366 obs. of  13 variables:\n $ V1 : Factor w/ 12 levels \"1\",\"2\",\"3\",\"4\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ V2 : Factor w/ 31 levels \"1\",\"2\",\"3\",\"4\",..: 1 2 3 4 5 6 7 8 9 10 ...\n $ V3 : Factor w/ 7 levels \"1\",\"2\",\"3\",\"4\",..: 4 5 6 7 1 2 3 4 5 6 ...\n $ V4 : num  3 3 3 5 5 6 4 4 6 7 ...\n $ V5 : num  5480 5660 5710 5700 5760 5720 5790 5790 5700 5700 ...\n $ V6 : num  8 6 4 3 3 4 6 3 3 3 ...\n $ V7 : num  20 NA 28 37 51 69 19 25 73 59 ...\n $ V8 : num  NA 38 40 45 54 35 45 55 41 44 ...\n $ V9 : num  NA NA NA NA 45.3 ...\n $ V10: num  5000 NA 2693 590 1450 ...\n $ V11: num  -15 -14 -25 -24 25 15 -33 -28 23 -2 ...\n $ V12: num  30.6 NA 47.7 55 57 ...\n $ V13: num  200 300 250 100 60 60 100 250 120 120 ...\n```\n:::\n\n```{.r .cell-code}\nOzone <- Ozone[complete.cases(Ozone), ]\n```\n:::\n\n\nA small amount of exploration first:\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-10_285faa5660b259cc7e0b249867d797c9'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\ntheme_set(theme_bw())\nlibrary(patchwork)\ng5 <- ggplot(Ozone) +\n    aes(x = V5, y = V4) +\n    geom_point()\ng6 <- ggplot(Ozone) +\n    aes(x = V6, y = V4) +\n    geom_jitter() # deal with overlapping points\ng7 <- ggplot(Ozone) +\n    aes(x = V7, y = V4) +\n    geom_point()\ng5 + g6 + g7\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nNow let's check some residuals!\n\n-   Change `.resid` to `.std.resid`.\n    -   Try `rstudent(olm)` as well.\n-   Change `.hat` to `.cooksd`.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-11_74cb2579f098ac1c4ae3ce1da4d7098b'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nolm <- lm(V4 ~ V5 + V6 + V7, data = Ozone)\naugment(olm) %>%\n    ggplot() +\n        aes(x = .fitted, y = .std.resid, col = .cooksd) +\n        scale_colour_viridis_c(option = 2, end = 0.7) +\n        theme(legend.position = \"bottom\") +\n        geom_point(size = 2) +\n        geom_hline(yintercept = 0, colour = \"grey\")\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\nWhich ones have a large hat value?\n\nThe plots below are the same as the ones above, but coloured according to the hat values.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-12_98522f38dfe67362b2dc267224ddec4c'}\n\n```{.r .cell-code}\ng5 <- ggplot(Ozone) +\n    aes(x = V5, y = V4, col = hatvalues(olm)) +\n    geom_point(size = 2)\ng6 <- ggplot(Ozone) +\n    aes(x = V6, y = V4, col = hatvalues(olm)) +\n    geom_jitter(size = 2) # deal with overlapping points\ng7 <- ggplot(Ozone) +\n    aes(x = V7, y = V4, col = hatvalues(olm)) +\n    geom_point(size = 2)\n(g5 + g6 + g7) +\n    plot_layout(guides = \"collect\") &\n    scale_colour_viridis_c(option = 2, end = 0.8) &\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n## Adding an Outlier\n\nLet's add an outlier to see what happens with these data.\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-13_0d01aec0602f1f0016ffa5e3508920b7'}\n\n```{.r .cell-code}\nnewzone <- Ozone[, c(4:7)]\nnewzone <- rbind(newzone,\n    data.frame(V4 = 30, V5 = 5300, V6 = 5, V7 = 40))\nnewlm <- augment(lm(V4 ~ ., data = newzone))\n\ng5 <- ggplot(newlm) +\n    aes(x = V5, y = V4, col = .hat) +\n    geom_point(size = 2)\ng6 <- ggplot(newlm) +\n    aes(x = V6, y = V4, col = .hat) +\n    geom_jitter(size = 2) # deal with overlapping points\ng7 <- ggplot(newlm) +\n    aes(x = V7, y = V4, col = .hat) +\n    geom_point(size = 2)\n(g5 + g6 + g7) +\n    plot_layout(guides = \"collect\") &\n    scale_colour_viridis_c(option = 2, end = 0.8) &\n    theme(legend.position = \"bottom\")\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n## Using R's Built-In Diagnostics\n\n\n::: {.cell hash='Lb11-R_hat_resids_cook_cache/html/unnamed-chunk-14_93acf55811f90ab0f9453dc455e64103'}\n\n```{.r .cell-code}\npar(mfrow = c(2, 2), mar = rep(2, 4))\nplot(lm(V4 ~ ., data = newzone))\n```\n\n::: {.cell-output-display}\n![](Lb11-R_hat_resids_cook_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnewzone[row.names(newzone) %in% c(1, 58, 243), ]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    V4   V5 V6 V7\n58  23 5740  3 47\n243 38 5950  5 62\n1   30 5300  5 40\n```\n:::\n:::\n\n\n1.  Huge residual!\n    -   This plot also just has a bad pattern\n2.  Deviates from normality!\n    -   Otherwise this looks pretty good.\n3.  Large standardized residual\n    -   Clear pattern without the outlier\n4.  Cook's distance is massive compared to the others\n    -   Potentially some large $D_i$'s\n5.  In the corner\n    -   Otherwise this looks okay-ish\n6.  Last plot also shows it as something different (harder to interpret)\n\n## What to do with a large residual?\n\n-   Misrecorded: remove or fix, if possible\n    -   Fires with negative lengths (MDY versus DMY)\n    -   CO2 measured as -99 (code for NA in a system with no NA option)\n    -   Heights measured in the wrong units\n-   Real, but large residual: Consider whether it's actually part of the population of interest\n    -   Studying heights and got a basketball player in your sample? That's a real data point and your model should allow for it!\n    -   Studying fish and a shark was included? That's real, but maybe you should narrow your scope!\n-   Many large outliers: you may need to try more predictors or a non-linear model.\n\nDo *NOT* remove a point simply because it's an outlier!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}